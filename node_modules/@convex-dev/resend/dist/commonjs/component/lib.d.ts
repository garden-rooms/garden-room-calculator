import { Doc } from "./_generated/dataModel";
export declare const sendEmail: import("convex/server").RegisteredMutation<"public", {
    replyTo?: string[] | undefined;
    html?: string | undefined;
    text?: string | undefined;
    headers?: {
        name: string;
        value: string;
    }[] | undefined;
    options: {
        onEmailEvent?: {
            fnHandle: string;
        } | undefined;
        initialBackoffMs: number;
        retryAttempts: number;
        apiKey: string;
        testMode: boolean;
    };
    from: string;
    to: string;
    subject: string;
}, Promise<import("convex/values").GenericId<"emails">>>;
export declare const cancelEmail: import("convex/server").RegisteredMutation<"public", {
    emailId: import("convex/values").GenericId<"emails">;
}, Promise<void>>;
export declare const getStatus: import("convex/server").RegisteredQuery<"public", {
    emailId: import("convex/values").GenericId<"emails">;
}, Promise<{
    status: "waiting" | "queued" | "cancelled" | "sent" | "delivered" | "delivery_delayed" | "bounced";
    errorMessage: string | null;
    complained: boolean;
    opened: boolean;
}>>;
export declare const get: import("convex/server").RegisteredQuery<"public", {
    emailId: import("convex/values").GenericId<"emails">;
}, Promise<{
    email: Doc<"emails">;
    html: string | undefined;
    text: string | undefined;
}>>;
export declare const makeBatch: import("convex/server").RegisteredMutation<"internal", {
    reloop: boolean;
}, Promise<void>>;
export declare const callResendAPIWithBatch: import("convex/server").RegisteredAction<"internal", {
    apiKey: string;
    emails: import("convex/values").GenericId<"emails">[];
}, Promise<void>>;
export declare const getAllContentByIds: import("convex/server").RegisteredQuery<"internal", {
    contentIds: import("convex/values").GenericId<"content">[];
}, Promise<{
    id: import("convex/values").GenericId<"content">;
    content: string;
}[]>>;
export declare const getEmailsByIds: import("convex/server").RegisteredQuery<"internal", {
    emailIds: import("convex/values").GenericId<"emails">[];
}, Promise<{
    _id: import("convex/values").GenericId<"emails">;
    _creationTime: number;
    html?: import("convex/values").GenericId<"content"> | undefined;
    text?: import("convex/values").GenericId<"content"> | undefined;
    headers?: {
        name: string;
        value: string;
    }[] | undefined;
    errorMessage?: string | undefined;
    resendId?: string | undefined;
    status: "waiting" | "queued" | "cancelled" | "sent" | "delivered" | "delivery_delayed" | "bounced";
    from: string;
    to: string;
    subject: string;
    replyTo: string[];
    complained: boolean;
    opened: boolean;
    segment: number;
    finalizedAt: number;
}[]>>;
export declare const markEmailsSent: import("convex/server").RegisteredMutation<"internal", {
    emailIds: import("convex/values").GenericId<"emails">[];
    resendIds: string[];
}, Promise<void>>;
export declare const getEmailByResendId: import("convex/server").RegisteredQuery<"internal", {
    resendId: string;
}, Promise<{
    _id: import("convex/values").GenericId<"emails">;
    _creationTime: number;
    html?: import("convex/values").GenericId<"content"> | undefined;
    text?: import("convex/values").GenericId<"content"> | undefined;
    headers?: {
        name: string;
        value: string;
    }[] | undefined;
    errorMessage?: string | undefined;
    resendId?: string | undefined;
    status: "waiting" | "queued" | "cancelled" | "sent" | "delivered" | "delivery_delayed" | "bounced";
    from: string;
    to: string;
    subject: string;
    replyTo: string[];
    complained: boolean;
    opened: boolean;
    segment: number;
    finalizedAt: number;
}>>;
export declare const handleEmailEvent: import("convex/server").RegisteredMutation<"public", {
    event: any;
}, Promise<void>>;
export declare const cleanupOldEmails: import("convex/server").RegisteredMutation<"internal", {}, Promise<void>>;
export declare const cleanupAbandonedEmails: import("convex/server").RegisteredMutation<"internal", {}, Promise<void>>;
//# sourceMappingURL=lib.d.ts.map