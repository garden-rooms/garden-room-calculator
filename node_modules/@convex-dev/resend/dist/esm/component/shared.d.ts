import { GenericDataModel, GenericMutationCtx, GenericQueryCtx } from "convex/server";
import { Infer } from "convex/values";
export declare const onEmailEvent: import("convex/values").VObject<{
    fnHandle: string;
}, {
    fnHandle: import("convex/values").VString<string, "required">;
}, "required", "fnHandle">;
export declare const vStatus: import("convex/values").VUnion<"waiting" | "queued" | "cancelled" | "sent" | "delivered" | "delivery_delayed" | "bounced", [import("convex/values").VLiteral<"waiting", "required">, import("convex/values").VLiteral<"queued", "required">, import("convex/values").VLiteral<"cancelled", "required">, import("convex/values").VLiteral<"sent", "required">, import("convex/values").VLiteral<"delivered", "required">, import("convex/values").VLiteral<"delivery_delayed", "required">, import("convex/values").VLiteral<"bounced", "required">], "required", never>;
export type Status = Infer<typeof vStatus>;
export declare const vOptions: import("convex/values").VObject<{
    onEmailEvent?: {
        fnHandle: string;
    } | undefined;
    initialBackoffMs: number;
    retryAttempts: number;
    apiKey: string;
    testMode: boolean;
}, {
    initialBackoffMs: import("convex/values").VFloat64<number, "required">;
    retryAttempts: import("convex/values").VFloat64<number, "required">;
    apiKey: import("convex/values").VString<string, "required">;
    testMode: import("convex/values").VBoolean<boolean, "required">;
    onEmailEvent: import("convex/values").VObject<{
        fnHandle: string;
    } | undefined, {
        fnHandle: import("convex/values").VString<string, "required">;
    }, "optional", "fnHandle">;
}, "required", "initialBackoffMs" | "retryAttempts" | "apiKey" | "testMode" | "onEmailEvent" | "onEmailEvent.fnHandle">;
export type RuntimeConfig = Infer<typeof vOptions>;
export declare const vEmailEvent: import("convex/values").VObject<{
    type: string;
    data: {
        bounce?: {
            message?: string | undefined;
        } | undefined;
        email_id: string;
    };
}, {
    type: import("convex/values").VString<string, "required">;
    data: import("convex/values").VObject<{
        bounce?: {
            message?: string | undefined;
        } | undefined;
        email_id: string;
    }, {
        email_id: import("convex/values").VString<string, "required">;
        bounce: import("convex/values").VObject<{
            message?: string | undefined;
        } | undefined, {
            message: import("convex/values").VString<string | undefined, "optional">;
        }, "optional", "message">;
    }, "required", "email_id" | "bounce" | "bounce.message">;
}, "required", "type" | "data" | "data.email_id" | "data.bounce" | "data.bounce.message">;
export type EmailEvent = Infer<typeof vEmailEvent>;
export type RunQueryCtx = {
    runQuery: GenericQueryCtx<GenericDataModel>["runQuery"];
};
export type RunMutationCtx = {
    runMutation: GenericMutationCtx<GenericDataModel>["runMutation"];
};
//# sourceMappingURL=shared.d.ts.map